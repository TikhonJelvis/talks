# -*- org-reveal-title-slide: "<h1 class='title'>%t</h1> <h2 class='subtitle'>%s</h2> <h3 class='author'>%a</h3>" -*-
#+Title: Reasoning under Uncertainty
#+Subtitle:
#+Author: Tikhon Jelvis
#+Email: tikhon@jelv.is

#+REVEAL_TITLE_SLIDE_BACKGROUND: #052d69
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION: none

#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="An introduction to Markov decision processes in Haskell.">
#+REVEAL_POSTAMBLE: <p> Created by Tikhon Jelvis. </p>

# Options I change before uploading to jelv.is
#+REVEAL_ROOT: ../reveal.js-3.8.0
#+REVEAL_INIT_OPTIONS: width:1200, height:800, controls:false, history:true, center:true, touch:true, transition:'none', progress:false, slideNumber: false

#+OPTIONS: toc:nil timestamp:nil email:nil num:nil

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_THEME: tikhon
#+REVEAL_HLEVEL: 2

#+REVEAL_PLUGINS: (highlight markdown notes)

* What /is/ uncertainty?
   :PROPERTIES:
   :reveal_background: #052d69
   :reveal_background_trans: none
   :reveal_extra_attr: class="section-slide"
   :END:

**
   Unknown information.

   Randomness.

**
   #+ATTR_HTML: :width 600px
   [[./img/poisson.svg]]

**
   #+BEGIN_SRC haskell
   die ∷ MonadSample m ⇒ m Int
   die = uniformD [1..6]
   #+END_SRC

   #+ATTR_HTML: :width 600px
   [[./img/1× die.svg]]

**
   #+BEGIN_SRC haskell
   dice2 ∷ MonadSample m ⇒ m Int
   dice2 = do
     one ← die
     two ← die
     pure (one + two)
   #+END_SRC

   #+ATTR_HTML: :width 600px
   [[./img/2× dice.svg]]

**
   #+BEGIN_SRC haskell
   diceGame ∷ MonadSample m ⇒ m Int
   diceGame = do
     n  ← die
     xs ← replicateM n die
     pure (sum xs)
   #+END_SRC

   #+ATTR_HTML: :width 600px
   [[./img/dice game.svg]]

**
   [[./img/prac-prob.png]]


* Simulation
   :PROPERTIES:
   :reveal_background: #052d69
   :reveal_background_trans: none
   :reveal_extra_attr: class="section-slide"
   :END:

**

   How do we handle

   /uncertainty over time/?

**
   Continuous vs discrete time?

   State?

   History?

** Markov Processes

**
   #+BEGIN_SRC haskell
   data MakrovProcess m s = MP {
     step ∷ s → m s
   }
   #+END_SRC

**
   1. Sell based on demand distribution

   2. Order 10 units if 3 or less left.

   3. Repeat.

**

   #+BEGIN_SRC haskell
   forecast ∷ MonadSample m ⇒ m Int
   forecast = poisson 1.2
   #+END_SRC

   #+ATTR_HTML: :width 600px
   [[./img/demand distribution.svg]]

**
   #+BEGIN_SRC haskell
   store ∷ m Int → MarkovProcess m Int
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC haskell
   store forecast = MP {
     step = \ inventory → do
       demanded ← forecast
       let remaining = max (inventory - demand) 0
       if remaining ≤ 3
         then pure (remaining + 10)
         else pure remaining
   }
   #+END_SRC

**
   #+BEGIN_SRC haskell
   simulate ∷ Monad m
            ⇒ MarkovProcess m s
            → s
            → Stream (Of s) m ()
   simulate process state = do
     next ← lift (step process state)
     yield next
     simulate process next
   #+END_SRC

**
   #+BEGIN_SRC haskell
   start, step start, step (step start), …
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC haskell
   simulate ∷ Monad m
            ⇒ MarkovProcess m s
            → s
            → Stream (Of s) m ()
   simulate MP { step } start =
     iterateM step (pure start)
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC haskell
   simulate ∷ Monad m
            ⇒ MarkovProcess m s
            → m s
            → Stream (Of s) m ()
   simulate MP { step } = iterateM step
   #+END_SRC

**

   [[./img/inventory.svg]]


**
   [[./img/inventory traces.svg]]

** Simulations are useful!

* Optimization
   :PROPERTIES:
   :reveal_background: #052d69
   :reveal_background_trans: none
   :reveal_extra_attr: class="section-slide"
   :END:
