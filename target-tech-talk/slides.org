#+Title: Programming with Probability
#+Author: Tikhon Jelvis
#+Email: tikhon.jelvis@target.com
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="How we work with probability distributions in Haskell.">

# Options I change before uploading to jelv.is
#+OPTIONS: reveal_control:nil
#+OPTIONS: reveal_mathjax:nil
#+REVEAL_ROOT: ../reveal.js/

#+OPTIONS: reveal_center:t reveal_progress:nil reveal_history:t 
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_rolling_links:nil
#+OPTIONS: toc:nil timestamp:nil email:t

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: tikhon
#+REVEAL_HLEVEL: 2

#+REVEAL_POSTAMBLE: <p> Created by Tikhon Jelvis. </p>
#+REVEAL_PLUGINS: (highlight markdown notes)

* Supply Chain Optimization
    :PROPERTIES:
    :reveal_background: white
    :END:

* Distribution Centers
  [[./img/dc-map.png]]

* Maximize Experience; Minimize Cost

* Keep Items on Shelves; Minimize Inventory

* 
  1. Why probability distributions?
  2. Programming with distributions (in Haskell)
  3. Stochastic optimization
  4. Probabilistic programming

* Demand Uncertainty
  [[./img/binomial-demand.png]]

* Demand Uncertainty
  [[./img/item-demand.png]]

* Tail Probabilities
  [[./img/item-demand-tail.png]]

* Probability Distributions /Matter/

* Why Haskell?
    :PROPERTIES:
    :reveal_background: white
    :END:

* We ♥ Haskell

* Abstraction

* Probability Distribution Abstraction
    :PROPERTIES:
    :reveal_background: white
    :END:

* 
  Abstract probability distribution type with *multiple interpretations*

* Multiple Interpretations
  - *sampling*
    - simulation
    - simulation-based optimization
  - *exhaustive*
    - exact methods
    - domain-specific algorithms

* Distributions
  #+BEGIN_SRC haskell
  data Dist a = ...

  dice ∷ Dist Int
  dice = uniform [1..6]

  dice2 ∷ Dist Int
  dice2 = dice + dice
  #+END_SRC

* 
  #+BEGIN_SRC haskell
  dice = uniform [1..6]
  #+END_SRC
  [[./img/dice.png]]

* 
  #+BEGIN_SRC haskell
  dice2 = dice + dice
  #+END_SRC
  [[./img/dice2.png]]

* Interface
    :PROPERTIES:
    :reveal_background: white
    :END:

* Creation
  #+BEGIN_SRC haskell
  weighted ∷ [(a, Probability)] → Dist a

  uniform  ∷ [a] → Dist a
  binomial ∷ Probability → Int → Dist Int

  pure ∷ a → Dist a
  pure = weighted [(a, 1)]
  #+END_SRC

* map
  
  #+BEGIN_SRC haskell
  map ∷ (a → b) → Dist a → Dist b
  #+END_SRC
* 
  #+BEGIN_SRC haskell
  coin ∷ Dist Bool
  coin = map (divisibleBy 2) dice
  #+END_SRC

  #+BEGIN_EXPORT html
  <div style="position:relative; height:75px"></div>
  <img style="border:none; box-shadow:none; background:none; height:400px" src="./img/single-die.png" />
  <span style="position: relative; bottom: 200px; font-size: 94pt"> ⇒ </span>
  <img style="border:none; box-shadow:none; background:none; height:400px" src="./img/coin-toss-cropped.png" />
  #+END_EXPORT

* 
  #+BEGIN_SRC haskell
  map (`mod` 5) dice2
  #+END_SRC
  #+BEGIN_EXPORT html
  <img src="./img/dice2-small.png" />
  <span style="position: relative; bottom: 175px; font-size: 60pt"> ⇒ </span>
  <img src="./img/divisible.png" />
  #+END_EXPORT

* 
  #+BEGIN_EXPORT html
  <img style="border:none; box-shadow:none; background:none; height:300px" src="./img/single-die.png" />
  <span style="position: relative; bottom: 125px; font-size: 94pt"> ⇒ </span>
  <img style="border:none; box-shadow:none; background:none; height:300px" src="./img/coin-toss-cropped.png" />

  <div style="position:relative; bottom: 40px">
    <div style="width:100%; height:10px">?</div>
    <div style="width:100%; height:30px"></div>

    <img style="border:none; box-shadow:none; background:none; height:300px" src="./img/coin-toss-cropped.png" />
    <span style="position: relative; bottom: 125px; font-size: 94pt"> ⇒ </span>
    <img style="border:none; box-shadow:none; background:none; height:300px" src="./img/single-die.png" />
  </div>
  #+END_EXPORT

* 
  #+BEGIN_SRC haskell
  map  ∷ (a → b)      → Dist a → Dist b

  map' ∷ (a → Dist b) → Dist a → Dist b
  #+END_SRC

* flatMap

  #+BEGIN_SRC haskell
  map  ∷ (a → b) → Dist a → Dist b

  flat ∷ Dist (Dist a) → Dist a

  flatMap ∷ (a → Dist b) → Dist a → Dist b
  flatMap f dist = flat (map f dist)
  #+END_SRC

  in Haskell, =flat= is called =join=

* Monads!
  #+BEGIN_SRC haskell
  pure ∷ a → m a
  map  ∷ (a → b) → m a → m b
  join ∷ m (m a) → m a
  #+END_SRC

  #+BEGIN_SRC haskell
  m ~ Dist
  #+END_SRC

  #+BEGIN_SRC haskell
  pure ∷ a → Dist a
  map  ∷ (a → b) → Dist a → Dist b
  join ∷ Dist (Dist a) → Dist a
  #+END_SRC

* join
  #+BEGIN_SRC haskell
  join ∷ Dist (Dist a) → Dist a
  #+END_SRC

  Two different interpretations.

* 
  #+BEGIN_SRC haskell
  data Coin = H | T
  
  coin ∷ Double → Dist Coin
  coin p = weighted [(T, p), (H, 1 - p)]

  fair   = coin 0.5
  unfair = coin 0.9
  #+END_SRC

* 
  #+BEGIN_SRC haskell
  randomCoin ∷ Dist (Dist Coin)
  randomCoin = 
    weighted [ (fair,   0.5)
             , (unfair, 0.5)
             ]
  #+END_SRC

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC haskell
  join randomCoin ∷ Dist Coin
  #+END_SRC

* Sampling
  #+BEGIN_SRC haskell
  randomCoin ∷ Dist (Dist Coin)
  randomCoin = …
  #+END_SRC
  
  #+BEGIN_SRC haskell
  flattened ∷ Dist Coin
  flattened = do
    coinDist ← randomCoin
    result   ← coinDist
    pure result
  #+END_SRC

* Exhaustive
  #+BEGIN_SRC haskell
  fair, unfair ∷ Dist Coin
  fair   = coin 0.5
  unfair = coin 0.9
  #+END_SRC


  [[./img/flipTree.png]] [[./img/flipTree'.png]]

* 

  #+BEGIN_SRC haskell
  randomCoin ∷ Dist (Dist Coin)
  randomCoin = weighted [ (0.5, coin 0.5)
                        , (0.5, coin 0.9) 
                        ]
  #+END_SRC
  
  [[./img/nested.png]]

* flattened 

  [[./img/flattened.png]]

  #+BEGIN_SRC haskell
  [ (H, 0.25), (T, 0.25)
  , (H, 0.05), (T, 0.45) ]
  #+END_SRC

* 
  #+BEGIN_SRC haskell
  result = join randomCoin
  #+END_SRC
  
  [[./img/final.png]]

* Implementations
    :PROPERTIES:
    :reveal_background: white
    :END:

* Sampling
  pseudorandom number generators
  
  #+BEGIN_SRC haskell
  sample ∷ Gen → (Double, Gen)

  type Random a = State Gen a 

  run   ∷ Seed → Random a → a
  runIO ∷ Random a → IO a
  #+END_SRC

* Exhaustive
  [[./img/erwig-fpf.png]]

* Exhaustive
  #+BEGIN_SRC haskell
  type Probability = Double 
    -- or Rational or...
  
  newtype Dist a = Dist 
    { probabilities ∷ [(a, Probability)] }
  #+END_SRC

* Exhaustive
  #+BEGIN_SRC haskell
  weighted ∷ [(a, Probability)] → Dist a
  weighted = Dist

  uniform ∷ [a] → Dist a
  uniform xs = Dist (zip xs [1, 1..])
  #+END_SRC

* Monad
  #+BEGIN_SRC haskell
  pure ∷ a → Dist a
  pure x = Dist [(x, 1)]
  
  map ∷ (a → b) → Dist a → Dist b
  map f (Dist ps) = Dist 
    [ (f x, p) | (x, p) ← ps ]
  
  join ∷ Dist (Dist a) → Dist a
  join dists = Dist 
    [ (x, p₁ * p₂) | (d, p₁) ← dists
                   , (x, p₂) ← d ]
  #+END_SRC

* Do-notation
  #+BEGIN_SRC haskell
  flattened ∷ Dist Coin
  flattened = do
    coinDist ← randomCoin
    result   ← coinDist
    pure resultn
  #+END_SRC

  Works for /any/ monad!

* Upsides
  - expressive
  - intuitive
  - fits well into Haskell

* Downsides
  - sloooooow
  - normalization

* Simple abstractions scale…
    :PROPERTIES:
    :reveal_background: white
    :END:

* 
    :PROPERTIES:
    :reveal_background: ./img/bananas.jpg
    :reveal_background_trans: none
    :reveal_trans: none
    :END:

  #+BEGIN_EXPORT html
  <h2 style="background:rgba(255,255,255,0.7)">…until the code goes bananas</h2>
  #+END_EXPORT

* Stochastic Optimization
  - optimization: 
    - exact distributions
  - simulation:
    - sampling

* Example

* 
  #+BEGIN_SRC haskell
  step ∷ Qty → Qty → m (Qty, Money)
  step inv order = do
    let stocked = inv + order
        cost    = price * order

    buyers ← demand

    let after  = max (stocked - buyers) 0
        profit = price * (inv - after)

    pure (remaining, profit - cost)
  #+END_SRC

* Probabilistic Programming
    :PROPERTIES:
    :reveal_background: white
    :END:

* 
  [[./img/prac-prob.png]]

* AST
  #+BEGIN_SRC haskell
  data D a where
    Pure        ∷ a → D a
    FlatMap     ∷ D b → (b → D a) → D a
    Primitive   ∷ Sampleable d ⇒ d a → D a
    Conditional ∷ (a → Prob) → D a → D a
  #+END_SRC

* Questions?
