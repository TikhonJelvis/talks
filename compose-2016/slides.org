#+Title: Analyzing Programs with Z3
#+Author: Tikhon Jelvis
#+Email: tikhon@jelv.is

#+OPTIONS: reveal_center:t reveal_progress:nil reveal_history:t reveal_control:nil
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_rolling_links:nil
#+OPTIONS: toc:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_THEME: tikhon
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Introduction to analyzing programs with Z3 in Haskell.">
#+REVEAL_POSTAMBLE: <p> Created by Tikhon Jelvis. </p>
#+REVEAL_PLUGINS: (highlight markdown notes)
#+REVEAL_MATHJAX_URL: mathjax/MathJax.js?config=TeX-AMS_SVG

* Boolean Satisfiability (SAT)
 - boolean variables

  \begin{equation}
    (x_1 \lor \lnot x_2) \land (x_1 \lor x_3 \lor \lnot x_4) \land \cdots 
  \end{equation}

 - solves *or* returns “unsat”

* SMT
 - Satsifiability Modulo Theories

  \begin{equation}
    x_1 \le 10 \land x_3 \le x_1 + x_2 \land \cdots
  \end{equation}

 - formulas with *different types* of variables

* Different Theories
  - unbounded integers
  - real numbers
  - fixed-size words (*bitvectors*)
  - floating point numbers
  - arrays
  - more

* Z3
  - SMT solver from Microsoft Research
  - Open source: *MIT license*
  - API bindings in Haskell, OCaml, C♯…

* Haskell
  - SBV
    - high-level DSL
    - supports multiple solvers
  - Haskell-Z3
    - Z3-specific bindings
    - useful for tools backed by Z3

* Analyzing Programs
  - program ⇒ SMT formula
  - variables:
    - inputs
    - outputs
    - intermediate states
  - *bounded*

* Solving
  - solve for outputs: interpreter
  - solve for /inputs/: *reverse interpreter*
  - intermediate variables: check invariants
  - compare programs
    - verify against specification

* IMP
  #+BEGIN_SRC java
    1 + x * 2
    (x <= 10) && (y == 5) 
  #+END_SRC

  - side effects:
  #+BEGIN_SRC java
    x := x + 1
    ⋯ ; ⋯
    while cond { ⋯ }
    if cond { ⋯ } else { ⋯ }
  #+END_SRC

* IMP
  \begin{align}
    A ::&= x & \text{variable}\\
        &|\quad n & \text{literal} \\
        &|\quad A + A & \\
        &|\quad A - A & \\
        &|\quad A * A & \\
        &|\quad A / A &
  \end{align}

* IMP
  #+BEGIN_SRC haskell
    data AExp = Var Name
              | Lit Int
              | AExp :+: AExp
              | AExp :-: AExp
              | AExp :*: AExp
              | AExp :/: AExp
  #+END_SRC

  #+BEGIN_SRC haskell
   data BExp = True' | False' | ⋯
  #+END_SRC

* IMP
  #+BEGIN_SRC haskell
    data Cmd = Skip
             | Set Name AExp
             | Seq Cmd Cmd
             | If BExp Cmd Cmd
             | While BExp Cmd
  #+END_SRC

* Inline ⇒ Unroll ⇒ SSA

* Inline
  #+BEGIN_SRC java
    def foo(a, b) { <BODY> }
    …
    foo (1, 2);
    stuff;
  #+END_SRC

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC java
    // fresh names
    a := 1;
    b := 2;
    <BODY>
    stuff;
  #+END_SRC

* Unroll
  #+BEGIN_SRC java
    while x < 5 { <BODY> }
  #+END_SRC

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC java
    if x < 5 {
      <BODY>
      if x < 5 {
        … /* bound times */
      } else {}
    } else {}
  #+END_SRC

* SSA
  - Single Static Assignment

  #+BEGIN_SRC java
    x := 10;
    a := 11;
    x := x + a;
  #+END_SRC

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC java
    x₀ := 10;
    a₀ := 11;
    x₁ := x₀ + a₀;
  #+END_SRC

* 
  #+BEGIN_SRC java
    if x < 5 {
      x := x + 1;
    } else {
      x := x + 2;
    }
  #+END_SRC

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC java
    if x < 5 {
      x₁ := x₀ + 1;
    } else {
      x₂ := x₀ + 2;
    }
    x₃ := φ(x₁, x₂)
  #+END_SRC

* 
  - Interpreter
    #+BEGIN_SRC haskell
      aexp :: (Scope Int) → AExp → Int
      bexp :: (Scope Int) → BExp → Bool
      cmd  :: (Scope Int) → Cmd  → Scope
    #+END_SRC
  - Compiler
    #+BEGIN_SRC haskell
      aexp :: (Scope AST) → AExp → Z3 AST
      bexp :: (Scope AST) → BExp → Z3 AST
      cmd  :: (Scope AST) → Cmd  → Z3 ()
    #+END_SRC

* 
   #+BEGIN_SRC java
   5 + x
   #+END_SRC

   \begin{align}
     bvAdd(&bv(5, 32),\\ &bv(x_0, 32))
   \end{align}

* Expressions
   #+BEGIN_SRC haskell
   Lit n     → n
   Var x     → lookup scope x
   e₁ :+: e₂ → aexp scope e₁ +
               aexp scope e₂
   #+END_SRC

   #+BEGIN_SRC haskell
   Lit n     → Z3.mkBv 32 n
   Var x     → lookup x scope
   e₁ :+: e₂ → do e₁ ← aexp scope e₁
                  e₂ ← aexp scope e₂
                  Z3.mkAdd e₁ e₂
   #+END_SRC

* 
  #+BEGIN_SRC java
  x = 5 + x
  #+END_SRC

  \begin{align}
  \text{assert}(x_1 = bvAdd(&bv(5, 32), \\ &bv(x_0, 32)))
  \end{align}

* Assignment
  #+BEGIN_SRC haskell
  Set name val →
    let newVal = aexp scope val in
    update name newVal scope
  #+END_SRC

  #+BEGIN_SRC haskell
  Set name val →
    do newVal ← aexp scope val
       newVar ← Z3.mkFreshBvVar name 32
       eq     ← Z3.mkEq newVar newVal
       Z3.assert eq
       return (update name newVar scope)
  #+END_SRC

* 
  #+BEGIN_SRC java
  if x < 5 {
    x := x + 1
  } else {
    x := x + 2
  }
  #+END_SRC

  \begin{align}
    &\text{assert}(x_1 = x_0 + 1) \\
    &\text{assert}(x_2 = x_0 + 2) \\
    &\text{assert}(x_3 = \phi(x_0 < 5, x_1, x_2)) \\
  \end{align}

* If: φ-functions
  #+BEGIN_SRC haskell
  If cond c_1 c_2 →
    do cond'   ← bexp scope cond
       scope'  ← compile scope c_1
       scope'' ← compile scope c_2
       makePhis cond' scope scope' scope''
  #+END_SRC

  #+BEGIN_SRC haskell
    Z3.mkIte cond (lookup name scope₁)
                  (lookup name scope₂)
  #+END_SRC

* Now What
  - *interpret*: starting variables
  - *reverse*: final variables
  - *check invariants*: intermediate variables
    - model checking
    - invariants in temporal logic

* Temporal Logic
  - quantified over *time*
    - \(\square P(x)\): \(P(x)\) always holds
    - \(\diamond P(x)\): \(P(x)\) eventually holds
    - …
  - safety and liveness

* Verification
  - *verify*: compare two programs
    - assert x1ₙ ≠ x2ₙ, y1ₙ ≠ y2ₙ…
    - solve
      - unsat: programs are equal
      - sat: counterexample input

* CEGIS
  *counterexample guided inductive synthesis*
  [[/home/tikhon/Documents/talks/compose-2016/cegis.png]]

* Sketching
  #+BEGIN_SRC java
    while x <= ?? {
      x += a * ??
    }
  #+END_SRC

* Example: Synquid
  *refinement types*
  #+BEGIN_SRC Haskell
    termination measure len
      :: List a -> {Int | _v >= 0} where
      Nil -> 0
      Cons x xs -> 1 + len xs

    replicate :: n: Nat -> x: a -> 
                 {List a | len _v == n}
    replicate = ??
  #+END_SRC

* Interactive Tools
  - nondeterministic execution
    - model concurrency
    - "angelic programming"
  - evaluate assertions statically
  - test case generation
  - synthesis-powered code completion

* Easier for DSLs!

* Bibliography
  - [[http://www.cs.berkeley.edu/~bodik/cs294fa12][program synthesis class]] with Ras Bodik
  - papers, etc: jelv.is/talks/compose-2016
