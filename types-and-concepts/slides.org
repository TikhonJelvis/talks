#+Title: Types ⇔ Design
#+Subtitle: 
#+Author: Tikhon Jelvis
#+Email: tikhon@jelv.is
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Static types aren't just about preventing bugs and errors, they can be a powerful tool for code design.">

# Options I change before uploading to jelv.is:
#
# - set controls to true
# - change reveal_root

#+REVEAL_INIT_OPTIONS: controls:false, center:true, progress:false, transition:"none", autoAnimate: false
#+REVEAL_ROOT: ../reveal.js-3.8.0/

#+REVEAL_TITLE_SLIDE_BACKGROUND: #052d69
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION: none
#+OPTIONS: reveal_title_slide:"<h1 class='title'>%t</h1> <h2 class='subtitle'>%s</h2> <h3 class='author'>%a</h3>"

#+OPTIONS: num:nil toc:nil timestamp:nil email:t

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_THEME: tikhon
#+REVEAL_HLEVEL: 2

#+REVEAL_POSTAMBLE: <p> Created by Tikhon Jelvis. </p>
#+REVEAL_PLUGINS: (markdown notes)

* What /is/ code design?
   :PROPERTIES:
   :reveal_background: #052d69
   :reveal_background_trans: none
   :reveal_extra_attr: class="section-slide"
   :END:

** 
   #+BEGIN_EXPORT html
   <ul class="stacked">
     <li> <img src="img/clean-code.jpg">
     <li> <img src="img/domain-driven-design.jpg">
     <li> <img src="img/design-patterns.jpg">
     <li> <img src="img/the-pragmatic-programmer.jpg">
     <li> <img src="img/philosophy-of-software.jpg">
   </ul>
   #+END_EXPORT

** 
   #+ATTR_HTML: :width 400px
   [[./img/essence-of-software.jpg]]

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design.svg]]

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-concepts.svg]]

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-feedback.svg]]

** 
   “Programming /is/ planning.”

   #+ATTR_REVEAL: :frag roll-in
   Programming /is/ design.

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-point-code.svg]]

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-point-concepts.svg]]

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-distance.svg]]

** 
  [[./img/rsync-delete-files.png]]

** 
   #+BEGIN_SRC bash
   > rsync -r * ~/Documents
   #+END_SRC

   #+BEGIN_SRC bash
   > ls
   --delete
   normal-document.txt
   stuff.json
   #+END_SRC

** 
   #+BEGIN_EXPORT html
   <pre class="manual-highlight">
   rsync -r --delete ~/path/a ~/path/b
   </pre>
   #+END_EXPORT

** 
   #+BEGIN_EXPORT html
   <pre class="manual-highlight">
   <span class="a">rsync</span> <span class="b">-r</span> <span class="b">--delete</span> <span class="c">~/path/a</span> <span class="c">~/path/b</span>
   </pre>
   #+END_EXPORT

** 
   #+BEGIN_EXPORT html
   <pre class="manual-highlight">
   <span class="a">rsync</span> -r --delete ~/path/a ~/path/b
   </pre>
   #+END_EXPORT

** 
   #+BEGIN_EXPORT html
   <pre class="manual-highlight">
   <span class="a">rsync</span> <span class="b">-r</span> <span class="c">*</span> <span class="c">~/out</span>
   </pre>
   #+END_EXPORT

   #+BEGIN_EXPORT html
   <pre class="manual-highlight">
   <span class="a">rsync</span> <span class="b">-r</span> <span class="c">~/path/a</span> <span class="c">~/path/b</span>
   </pre>
   #+END_EXPORT

** 
   #+ATTR_HTML: :class no-background :width 400
   [[./img/delete-file-directory-listing.png]]

** 
   #+ATTR_HTML: :class no-background
   [[./img/frustrated.svg]]


* What are types /for/?
   :PROPERTIES:
   :reveal_background: #052d69
   :reveal_background_trans: none
   :reveal_extra_attr: class="section-slide"
   :END:

   #+BEGIN_NOTES
   Do we /need/ static types for good design?

   If we don't, what are types /for/?
   #+END_NOTES
** 

  #+BEGIN_EXPORT html
  <div class="horizontal-gallery">
    <div class="figure">
      <img src="./img/barrier.svg" class="icon" width="275">
      <p>bugs</p>
    </div>
    <div class="figure">
      <img src="./img/scaffolding.svg" class="icon" width="275">
      <p>structure</p>
    </div>
    <div class="figure">
      <img src="./img/blueprint.svg" class="icon" width="275">
      <p>design</p>
    </div>
  </div>
  #+END_EXPORT

** 

  #+ATTR_HTML: :width 400px :class no-background
  [[./img/barrier.svg]]

  “Types catch mistakes”

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-point-code.svg]]

** 

  #+ATTR_HTML: :width 400px :class no-background  
  [[./img/scaffolding.svg]]
  
  “Types structure my code”

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-point-code-distance.svg]]

** 

  #+ATTR_HTML: :width 400px :class no-background  
  [[./img/blueprint.svg]]

  “Types help me think”

** 
   #+ATTR_HTML: :width 800px :class no-background
   [[./img/code-design-types-concepts-feedback.svg]]

** 

  #+BEGIN_EXPORT html
  <div class="horizontal-gallery">
  #+END_EXPORT
  
  #+ATTR_HTML: :class icon
  [[./img/barrier.svg]]


  #+ATTR_HTML: :class icon
  [[./img/scaffolding.svg]]

  #+ATTR_HTML: :class icon
  [[./img/blueprint.svg]]

  #+BEGIN_EXPORT html
  </div>
  #+END_EXPORT

** 
  Information hiding:

  abstract over *implementation*

  ::

  Static types:

  abstract over *runtime*

** 
   #+ATTR_HTML: :class no-background :width 600
   [[./img/abstract-interpretation-traces.svg]]

** 
   #+ATTR_HTML: :class no-background :width 600
   [[./img/abstract-interpretation-approximation.svg]]

   a different sort of abstraction

** 
   #+BEGIN_SRC haskell
     encode :: Image RGB -> ByteString
     encode = _
   #+END_SRC

** 
   #+BEGIN_SRC haskell
     encode :: Image RGB -> ByteString
     encode = _
   #+END_SRC

   #+BEGIN_SRC haskell
     colorSpace :: Image RGB -> Image YCbCr
     colorSpace = _
   #+END_SRC

   #+BEGIN_SRC haskell
     downsample :: Image YCbCr 
                -> Downsampled
     downsample = _
   #+END_SRC

   #+BEGIN_SRC haskell
     blocks :: Downsampled 
            -> [Downsampled]
     blocks = _
   #+END_SRC

   ...

** 
   #+BEGIN_SRC haskell
     data Image space = Image
       { pixels :: Vector space }

     data Downsampled = Downsampled
       { y  :: Vector Word8
       , cb :: Vector Word8
       , cr :: Vector Word8
       }
   #+END_SRC

** 
   #+ATTR_HTML: :width 500
   [[./img/foundations-of-rl.jpg]]

** 
   #+ATTR_HTML: :width 900
   [[./img/mdp-definition.jpg]]

** 
   #+ATTR_HTML: :width 500
   [[./img/mp-definition.jpg]]

   #+ATTR_HTML: :width 500
   [[./img/mrp-definition.jpg]]


** 
   #+BEGIN_SRC haskell
     data MarkovProcess m s = MP {
       step :: s -> m s
     }

     data MarkovRewardProcess m s = MRP {
       step :: s -> m (r, s)
     }

     data MDP m a s = MDP {
       step :: s -> a -> m (r, s)
     }

     type Policy s a = s -> a
   #+END_SRC

** 
   #+BEGIN_SRC haskell
     data MarkovProcess m s = MP {
       step :: s -> m s
     }

     type MarkovRewardProcess m s =
       MarkovProcess (WriterT Reward m) s
   #+END_SRC

** 
   #+BEGIN_SRC haskell
     data MDP m a s = MDP {
       step :: s -> a -> m s
     }

     apply :: MDP m a s 
           -> Policy s a 
           -> MarkovProcess m s
   #+END_SRC

** 
  #+BEGIN_SRC haskell
           ▿
  data MDP m a s = MDP {
    step :: s -> a -> m s
  }
  #+END_SRC

** 
  #+BEGIN_SRC haskell
             ▿
  data MDP m a s = MDP {
    step :: s -> a -> m s
  }
  #+END_SRC

** 
  #+BEGIN_SRC haskell
               ▿
  data MDP m a s = MDP {
    step :: s -> a -> m s
  }
  #+END_SRC

** 

   So, what did static typing get us?

** 
   #+ATTR_REVEAL: :frag roll-in
   simplify our *conceptual model*

   #+ATTR_REVEAL: :frag roll-in
   feedback *before we had runnable code*

   #+ATTR_REVEAL: :frag roll-in
   *interactive* support as we program

   #+ATTR_REVEAL: :frag roll-in
   *high-level* guide to our conceptual model
   
* Where does this take us?
   :PROPERTIES:
   :reveal_background: #052d69
   :reveal_background_trans: none
   :reveal_extra_attr: class="section-slide"
   :END:

** Type-Driven Development
   #+ATTR_REVEAL: :frag roll-in
   Concepts ⇒ Types ⇒ Code

** 
   [[./img/how-statically-typed-programmers-write-code.png]]

** Domain Driven Design?
   #+ATTR_HTML: :width 600
   [[./img/domain-driven-design-made-functional.jpg]]

** Dependent Types?
   #+ATTR_HTML: :width 600
   [[./img/type-driven-development-with-idris.jpg]]

** LLM Code Generation

** 
   Today: boilerplate, bad code, no design, no verification

** 
   Tomorrow: better tools, good design, verification?

* Our tools should help us think
   :PROPERTIES:
   :reveal_background: #052d69
   :reveal_background_trans: none
   :reveal_extra_attr: class="section-slide"
   :END:
