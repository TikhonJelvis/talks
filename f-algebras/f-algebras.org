#+OPTIONS: f:nil toc:nil
#+TITLE: F-Algebras
#+AUTHOR: Tikhon Jelvis (tikhon@jelv.is)

* Abstract Algebra
  - *great source of abstractions*
  - common patterns, factored out
    - simple
    - broad
    - expressive

* Algebraic Structures
  - set $S$ with certain operations
    - functions *closed* over set
    - any number of arguments
    - special values: *identities*
  - Haskell: set ⇒ type
    - express as typeclass

* Monoid
  - type =m=
    - =(<>) ∷ m → m → m=
    - =mempty ∷ m=
  - laws:
    - =mempty <> x = x = x <> mempty=
    - =(a <> b) <> c = a <> (b <> c)=

* Others
  - Group =g=
    - =(<>) ∷ m → m → m=
    - =mempty ∷ m=
    - =inv ∷ m → m=
  - rings, lattices...
    - semirings, semilattices...

* Patterns
  - Group =g=
   - =() → g=
   - =(g) → g=
   - =(g, g) → g=

* Patterns
  - Group =g=
   - =g⁰ → g=
   - =g¹ → g=
   - =g² → g=

* Algebra
  - *algebra*
    - universe: set/type =a=
    - signature: =(x, y, z…)=
  - operations assumed associative
  - ignore other laws
  - monoid: =(0, 2)=
  - group: =(0, 1, 2)=
  - ring: =(0, 0, 1, 2, 2)=

* F-Algebras
  - combine into one function:
  #+BEGIN_SRC Haskell
  op ∷ Monoid m ⇒ Either (m, m) () → m
  op (Left (a, b)) = a <> b
  op (Right ())    = mempty
  #+END_SRC
  - works for any number of operations!

* Data Type
  - semantic name
  #+BEGIN_SRC Haskell
  data MonoidArgument m = MAppend m m 
                        | MEmpty
  #+END_SRC
  - similarly
  #+BEGIN_SRC Haskell
  data GroupArgument m = GAppend m m
                       | GInverse m
                       | GEmpty
  #+END_SRC

* Algebras
  - new definition:
  #+BEGIN_SRC Haskell
  type Monoid m = MonoidArgument m → m

  type Group g = GroupArgument g → g
  #+END_SRC
  - both types are *functors*

* F-Algebras
  - general definition
  #+BEGIN_SRC Haskell
  type Algebra f a = f a → a

  type Monoid m = Algebra MonoidArgument m
  type Group g = Algebra GroupArgument g
  #+END_SRC

  - allows other kinds of algebras
    - =Num=

* Review
  - =type Algebra f a = f a → a=
  - =f= is the *signature*
  - =a= is the *universe*
  - *existing typeclasses and structures*
    - =Monoid=
    - =Group=
    - =Num=

* Folds
  - algebras are all about *deconstructing*
    - produce =a= from richer =f a=
  - generalizes *fold* to different types
    - aka *catamorphism*

* Fix
  - recursive types in two parts
  #+BEGIN_SRC Haskell
  data List a = Cons a (List a) | Nil
  #+END_SRC

  #+BEGIN_SRC Haskell
  data Fix f = Fix (f (Fix f))
  data ListF a r = Cons a r | Nil
  #+END_SRC

  #+BEGIN_SRC Haskell
  type List a = Fix (ListF a)
  #+END_SRC

* Fold
  - unwrap layers of =Fix=
  - apply F-algebra at each step
  #+BEGIN_SRC Haskell
  fold ∷ (f a → a) → (Fix f → a)
  fold fa (Fix fs) = fa $ fmap (fold fa) fs
  #+END_SRC

* Example
  - looks familiar?
  #+BEGIN_SRC Haskell
  data ListF a r = Cons a r | Nil
    deriving (Functor)
  type List a = Fix (ListF a)

  sum' = fold fa
    where fa (Cons a b) = a + b
          fa Nil        = 0
  #+END_SRC

* Foldable
  - list folds: monoids!
  #+BEGIN_SRC Haskell
  fa (Cons a b) = a + b
  fa Nil        = 0

  fa (Mappend a b) = a + b
  fa Mempty        = 0
  #+END_SRC
  - =Data.Foldable=
   - =fold ∷ (Foldable f, Monoid m) => f m → m=
  

* Tree Fold
  - different shape
  #+BEGIN_SRC Haskell
  data TreeF a r = Node a [r]
    deriving (Functor)
  type Tree a = Fix (TreeF a)

  treeSum ∷ Tree Int → Int
  treeSum = fold fa
    where fa (Node x ts) = x + sum ts
  #+END_SRC

* Review
  - F-Algebras *generalize algebraic structures*
  - =type Algebra f a = f a → a=
    - functor =f= as *signature*
  - lets us *destruct* data structures
    - generic fold
    - works for data structures with *different shapes*
    - =fold ∷ (f a → a) → (Fix f → a)=
