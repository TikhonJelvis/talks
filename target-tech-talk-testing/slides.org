# -*- org-reveal-title-slide: "<h1 class='title'>%t</h1> <h2 class='subtitle'>%s</h2> <h3 class='author'>%a</h3>" -*-
#+Title: Testing
#+Subtitle: for Machine Learning
#+Author: Tikhon Jelvis
#+Email: tikhon@jelv.is

#+REVEAL_TITLE_SLIDE_BACKGROUND: #052d69
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION: "none"

#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="An introduction to Markov decision processes in Haskell.">
#+REVEAL_POSTAMBLE: <p> Created by Tikhon Jelvis. </p>

# Options I change before uploading to jelv.is
#+REVEAL_ROOT: ../reveal.js-3.8.0
#+REVEAL_INIT_OPTIONS: width:1200, height:800, controls:false, history:true, center:true, touch:true, transition:'none', backgroundTransition:'none', progress:false, slideNumber: false

#+OPTIONS: toc:nil timestamp:nil email:nil num:nil

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_THEME: tikhon
#+REVEAL_HLEVEL: 2

#+REVEAL_PLUGINS: (markdown notes)
* Testing
  :PROPERTIES:
  :reveal_background: #052d69
  :reveal_extra_attr: class="section-slide"
  :END:
** /Why?/
** Fewer bugs?
** 
   #+BEGIN_EXPORT html
   <ul class="stacked">
     <li> <img src="img/unit-testing-paper-1.png" /> </li>
     <li> <img src="img/unit-testing-paper-5.png" /> </li>
     <li> <img src="img/unit-testing-paper-3.png" /> </li>
     <li> <img src="img/unit-testing-paper-4.png" /> </li>
     <li> <img src="img/unit-testing-paper-2.png" /> </li>
   </ul>
   #+END_EXPORT

   Probably
** Cycle Times
** 
   How fast do you catch errors? 
** 
   #+ATTR_HTML: :height 800px :class no-background
   [[./img/cycle-times-1.png]]
** 
   #+ATTR_HTML: :height 800px :class no-background
   [[./img/cycle-times-2.png]]
** 
   #+ATTR_HTML: :height 800px :class no-background
   [[./img/cycle-times-3.png]]
** 
   #+ATTR_HTML: :height 800px :class no-background
   [[./img/cycle-times-with-tests.png]]
** Code Design
** Testable Code ⇒ Usable Code
* Machine Learning
  :PROPERTIES:
  :reveal_background: #052d69
  :reveal_extra_attr: class="section-slide"
  :END:
** Testing ML is /Hard/
** Inputs and Data
   #+ATTR_HTML: :height 600px
   [[./img/input-data.svg]]
** The Oracle Problem
   #+ATTR_HTML: :height 800px :style position: relative; top: -100px
   [[./img/oracle-problem.svg]]
** Emergent Complexity
   #+ATTR_HTML: :height 600px
   [[./img/network.svg]]
** Testing is useful; Testing /ML/ is hard.
* Testing Techniques
  :PROPERTIES:
  :reveal_background: #052d69
  :reveal_extra_attr: class="section-slide"
  :END:
** 
  1. Unit Tests
  2. Property-Based Tests
  3. Metamorphic Relations
** Unit Tests
** 
   [[./img/programs-all-lines.svg]]
** 
   [[./img/programs-two-lines.svg]]
** 
   #+BEGIN_SRC python
   def mean(xs):
       return sum(xs) / len(xs)
   #+END_SRC
** 
   #+BEGIN_SRC python
   class TestMean(unittest.TestCase):
       def test_mean():
           short = [10]
           self.assertEqual(mean(short), 10.0)

           longer = [1,2,3,4]
           self.assertEqual(mean(longer), 5.0)
   #+END_SRC
** ∃x. f(x) is correct
** Simple Tests?
     - fast feedback
     - future regressions
     - executable examples
** Unknowns
   #+ATTR_HTML: :height 500px :class no-background
   [[./img/unknown.svg]]
** Unknown Unknowns
   #+ATTR_HTML: :height 500px :class no-background
   [[./img/unknown.svg]] 

   #+ATTR_HTML: :height 500px :class no-background
   [[./img/unknown.svg]]
** Property-Based Tests
** 
   [[./img/programs-all-lines.svg]]
** ∀x. ϕ(f(x))
   [[./img/programs-properties-no-formula.svg]]

** 
   1. x ← random input
   2. y = f(x)
   3. assert ϕ(y)
** ∀x. f(x) is not wrong
   #+ATTR_REVEAL: :frag roll-in
   In a specific way.
   #+ATTR_REVEAL: :frag roll-in
   Probably...
** 
   #+BEGIN_SRC python
   def mean(xs):
      return sum(xs) / len(xs)
   #+END_SRC
** 
   #+BEGIN_SRC python
   from hypothesis import given
   from hypothesis.strategies import *
   #+END_SRC

   #+BEGIN_SRC python
   class TestMean(unittest.TestCase):
   #+END_SRC

   #+BEGIN_SRC python
       @given(lists(floats(), min_size=1))
       def test_mean(self, xs):
           self.assertTrue(
               min(xs) <= mean(xs) <= max(xs))
   #+END_SRC
** 
   #+BEGIN_SRC python
   Falsifying example: 
     test_mean(self=<...>, xs=[nan],)
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC python
   floats(allow_nan=False)
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC python
   Falsifying example: 
     test_mean(self=<...>, xs=[inf, -inf],)
   #+END_SRC

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC python
   floats(allow_nan=False, allow_infinity=False)
   #+END_SRC
** 
   #+BEGIN_SRC python
   Falsifying example: test_mean(
       self=<...>, 
       xs=[9.9792015476736e+291, 1.7976931348623157e+308],
   )
   #+END_SRC
** Hypothesis
   1. Generate random values
   2. Check properties
   3. Shrink failing examples
** Metamorphic Relations
** 
   [[./img/programs-metamorphic.svg]]

   $R_I(a, b) ⇒ R_O(f(a), f(b))$
** 
   [[./img/programs-metamorphic-equivalence.svg]]

   $R_I(a, b) ⇒ f(a) = f(b)$
** 
   [[./img/mettle-paper-screenshot.png]]
* What's Next?
** Let's write tests!
** Techniques
   1. Unit tests
   2. Property-based tests
   3. Metamorphic relations
   4. More?
** Can we make it easier?
* Questions?
  :PROPERTIES:
  :reveal_background: #052d69
  :reveal_extra_attr: class="section-slide"
  :END:
