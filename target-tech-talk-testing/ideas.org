* Testing in general
  - what are we trying to accomplish with automated tests?
  - example: regression testing
** Why?
*** Cycle Times
    How fast do you know something is wrong? The /faster/ you get
    feedback, the easier it is to improve your code.

    How long does it take you to /track down/ where a bug is coming
    from? The /more specific/ your feedback, the easier it is to
    debug.
*** Code Quality
    - catch bugs before they go into production
    - regression tests make sure production bugs don't come back
** Testing machine learning
   What makes it harder to test machine learning code? What can we do
   about that?
*** References:
    - [[https://arxiv.org/pdf/1906.10742][ML testing survey paper]]
* Testing Techniques
  What can we do to get these benefits /for machine learning code/?

  Basic unit tests + regression tests are a start and there are more
  advanced techniques for testing code that is hard to unit test.
** Unit Tests + Regression Tests
   - general tutorial on unit tests
   - use a diagram to show how they work 
     - point cloud as inputs, point cloud as outputs, unit tests
       connecting specific input to specific output
** Property-based Tests
   - known unknowns vs unknown unknowns
   - a few examples:
     - testing that code doesn't crash
     - testing mathematical/logical properties
     - testing optimized/scaled code against a reference
       implementation
   - walk through some examples with Hypothesis
*** Examples
    - don't crash
      - more useful than it sounds!
    - encode-decode (Theta)
    - optimized vs reference algorithm
    - mathematical properties
      - non-decreasing function
      - sum to 1 (ish?)
      - etc
*** Bonus: benchmarking
    Being able to generate inputs to your code is useful not just for
    testing but also for performance optimization: benchmarking,
    profiling, stress-testing... etc.
*** References:
    - [[https://hypothesis.works/][Hypothesis description/testimonials]]
    - [[https://hypothesis.readthedocs.io/en/latest/endorsements.html][Hypothesis testimonials]]
      - highlight Stripe example in particular
      - [[https://stripe.com/blog/hypothesis][Strip blog post about Hypothesis]]
    - [[https://haskell.love/susan-potter/][Susan Potter: Thinking in Properties]]
    - [[https://publications.lib.chalmers.se/records/fulltext/232550/local_232550.pdf][Experiences with QuickCheck: testing the hard stuff]]
    - [[http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf][QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs]]
** Metamorphic Relations
   What can we do if inputs are hard to generate *and* we don't know
   exactly what output to expect?
*** References:
    - [[https://www.hillelwayne.com/post/metamorphic-testing/][Hillel's blog post]]
    - [[https://arxiv.org/abs/1807.10453][METTLE]]
