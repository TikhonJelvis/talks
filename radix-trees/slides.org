# -*- org-reveal-title-slide: "<h1 class='title'>%t</h1> <h2 class='subtitle'>%s</h2> <h3 class='author'>Tikhon Jelvis</h3>" -*-
#+Title: Radix Trees
#+Subtitle: How IntMap Works
#+Author: Tikhon Jelvis
#+Email: tikhon@jelv.is

#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="An overview of tries (or radix trees) in Haskell, focusing on the PATRICIA trie used by Data.IntMap.">
#+REVEAL_POSTAMBLE: <p> Created by Tikhon Jelvis. </p>

# Options I change before uploading to jelv.is
#+OPTIONS: reveal_control:nil
#+OPTIONS: reveal_mathjax:t
#+REVEAL_ROOT: ../reveal.js

#+OPTIONS: reveal_center:t reveal_progress:nil reveal_history:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_rolling_links:nil
#+OPTIONS: toc:nil timestamp:nil email:t

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_THEME: tikhon
#+REVEAL_HLEVEL: 2

#+REVEAL_PLUGINS: (highlight markdown notes)

* Tries
  - key-value map
    - simple
    - persistent
    - fast

* Re/*trie*/val

* Also Called
  - digital trees
  - prefix trees
  - radix trees

* Tries
  - basic trie
  - PATRICIA trie: =Data.IntMap=
  - variations
    - branching factor
    - (Persistent) Adaptive Radix Tree

* Example
  [[./tree.svg]]

* lookup “b”
  [[./b.svg]]
  - b = 1

* lookup “bab”
  [[./b.svg]]
  - b

* lookup “bab”
  [[./b→ba.svg]]
  - b → a

* lookup “bab”
  [[./b→ba→bab.svg]]
  - b → a → b = 7

* 
#+BEGIN_SRC haskell
data Trie a = 
  Node (Maybe a) [(Char, Trie a)]

lookup :: String → Trie a → Maybe a

insert :: String → a → Trie a → Trie a
#+END_SRC

* Prefixes
  - every key starting with “ba”
  [[./b→ba.svg]]
  [[./prefix-ba.svg]]

* PATRICIA
  Practical Algorithm to Retrieve Information Coded in Alphanumeric

  - developed in /1968/

* Okasaki and Gill, 1998
    [[./okasaki.png]]

* Data.IntMap
  - =Int= keys
    - bit-by-bit
  - persistent
  - =ByteString= keys?

* Structure
  - branch on each bit
  [[./binary.svg]]

* Paths
   [[./paths-waste.svg]]

  two keys: 00011, 00001 

* Compressed Paths
  [[./compressed.svg]]

* Compressed Paths
  [[./compressed2.svg]]

* Compressed Paths
  [[./compressed-leaves.svg]]

* Data.IntMap
  #+BEGIN_SRC haskell
  type Prefix = Int
  type Mask = Int

  data IntMap a = 
      Branch !Prefix !Mask 
             !(IntMap a) !(IntMap a)
    | Leaf !Prefix a
    | Empty
  #+END_SRC

* Performance Considerations
  - unbox as much as possible
  - *spine strict*

  - =highestBitSet= ~ bitwise trick

*** highestBitSet
   #+BEGIN_SRC haskell
   -- Borrowed from Haskell's Data.IntMap
highestBitSet :: Int -> Int
highestBitSet n =
  case (n .|. shiftR n 1) of
    n -> case (n .|. shiftR n 2) of
      n -> case (n .|. shiftR n 4) of
        n -> case (n .|. shiftR n 8) of
          n -> case (n .|. shiftR n 16) of
            n -> case (n .|. shiftR n 32) of   -- for 64 bit platforms
              n -> (n `xor` (shiftR n 1))
   #+END_SRC

* Performance
  - much faster than =Data.Map=
    - fast lookup/insert
    - fast scans and merges
  - slower than mutable hash map

* Branching Factor
  [[./wtrees.svg]]
  n bits of key = 2ⁿ children per node

* 
  [[./branching-tradeoff.png]]
  - from ART paper
  - benchmark with /mutable/ tries

* Adaptive Radix Trees
  [[./art.png]]

* Adaptive Radix Trees
  - branching factor: 256
  - byte at a time
  [[./art-nodes.png]]

* Four Types of Nodes
  [[./art-nodes-details.png]]

* /Persistent/ Adaptive Radix Trees?
  - Java version with promising benchmarks
    - [[https://github.com/ankurdave/part][By Ankur Dave, available on GitHub]]
  - good fit for Haskell?

* Functional Graph Library
  [[./graph.png]]
  - (See [[http://jelv.is/blog/Generating-Mazes-with-Inductive-Graphs][Generating Mazes with Inductive Graphs]])

* Summary
  - IntMap: /binary/ radix tree
  - different branching factors
    - time/memory tradeoff
  - (persistent) adaptive radix trees
  - optimize for Haskell?
