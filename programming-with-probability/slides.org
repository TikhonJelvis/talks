#+Title: Probability Monad
#+Author: Tikhon Jelvis
#+Email: tikhon@jelv.is
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Probability distributions form a monad. I'll talk about how we can use this monad in different ways to work with probability distributions in our code.">

# Options I change before uploading to jelv.is
#+OPTIONS: reveal_control:nil
#+OPTIONS: reveal_mathjax:nil
#+REVEAL_ROOT: ./reveal.js

#+OPTIONS: reveal_center:t reveal_progress:nil reveal_history:t 
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800 reveal_rolling_links:nil
#+OPTIONS: toc:nil timestamp:nil email:t

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_THEME: tikhon
#+REVEAL_HLEVEL: 2

#+REVEAL_POSTAMBLE: <p> Created by Tikhon Jelvis. </p>
#+REVEAL_PLUGINS: (highlight markdown notes)

* 
  1. Probability Distributions
  2. Interpretations
  4. Supply Chain Optimization
  5. Probabilistic Programming

* 
  =dice = uniform [1..6]=
  [[./img/dice.png]]

* 
  =dice2 = dice + dice=
  [[./img/dice2.png]]

* Abstract Type
  #+BEGIN_SRC haskell
  data Dist a = ...

  dice :: Dist Int
  dice = uniform [1..6]

  coin :: Double -> Dist Coin
  coin p = 
    weighted [(T, p), (H, 1 - p)]
  #+END_SRC

* Monad
  #+BEGIN_SRC haskell
  pure :: a → Dist a
  fmap :: (a → b) → (Dist a → Dist b)
  join :: Dist (Dist a) → Dist a
  #+END_SRC

  - remember =flatMap= or =bind=:
  #+BEGIN_SRC haskell
  x >>= f = join (fmap f x)
  #+END_SRC

* pure
  #+BEGIN_SRC haskell
  pure x = uniform [x]
  #+END_SRC
  [[./img/constant.png]]

* fmap
  #+BEGIN_SRC haskell
  fmap (`mod` 5) dice2
  #+END_SRC
  #+BEGIN_EXPORT html
  <img src="./img/dice2-small.png" />
  <span style="position: relative; bottom: 175px; font-size: 60pt"> ⇒ </span>
  <img src="./img/divisible.png" />
  #+END_EXPORT

* join
  #+BEGIN_SRC haskell
  join :: Dist (Dist a) → Dist a
  #+END_SRC

* 
  #+BEGIN_SRC haskell
  coin :: Double -> Dist Coin
  coin p = 
    weighted [(T, p), (H, 1 - p)]
  #+END_SRC

* 
  #+BEGIN_SRC haskell
  fair, unfair :: Dist Coin
  fair = coin 0.5
  unfair = coin 0.9
  #+END_SRC


  [[./img/flipTree.png]] [[./img/flipTree'.png]]

* 

  #+BEGIN_SRC haskell
  randomCoin :: Dist (Dist Coin)
  randomCoin = weighted [ (0.5, coin 0.5)
                        , (0.5, coin 0.9) 
                        ]
  #+END_SRC
  
  [[./img/nested.png]]

* flattened 

  [[./img/flattened.png]]

  #+BEGIN_SRC haskell
  [ (H, 0.25), (T, 0.25)
  , (H, 0.05), (T, 0.45) ]
  #+END_SRC

* 
  #+BEGIN_SRC haskell
  result = join randomCoin
  #+END_SRC
  
  [[./img/final.png]]
